{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/components/PageHeader/PageHeader.js","webpack:///./src/templates/singleTagsIndex.js"],"names":["formatReadingTime","minutes","cups","Math","round","Array","E","fill","join","formatPostDate","date","lang","Date","prototype","toLocaleDateString","args","day","month","year","filter","Boolean","PageHeader","props","Container","Grid","container","columns","style","marginTop","Row","marginBottom","Column","mobile","tablet","computer","topSegment","Header","as","fontSize","lineHeight","headerSegment","bottomSegment","only","logo","width","marginRight","marginLeft","sizes","SingleTagsTemplate","location","pageContext","posts","tagName","seoDesc","subUrl","frontmatter","tags","tag","seoTitle","seoSlug","pathname","map","post","index","key","to","path","title"],"mappings":"gLAKO,SAASA,EAAkBC,GAChC,IAAMC,EAAOC,KAAKC,MAAMH,EAAU,GAElC,OAAIC,EAAO,EACH,MAAO,IAAIG,MAAMF,KAAKC,MAAMF,EAAOC,KAAKG,IAC3CC,KAAK,MACLC,KAAK,IAFR,IAEeP,EAFf,YAIM,MAAO,IAAII,MAAMH,GAAQ,GAAGK,KAAK,MAAMC,KAAK,IAAlD,IAAyDP,EAAzD,YAWG,SAASQ,EAAeC,EAAMC,GAAO,IAAD,EACzC,GAAiD,mBAAtCC,KAAKC,UAAUC,mBACxB,OAAOJ,EAGTA,EAAO,IAAIE,KAAKF,GAEhB,IAAMK,EAAO,CAACJ,EAAM,CAAEK,IAAK,UAAWC,MAAO,OAAQC,KAAM,YAAaC,OAAOC,SAE/E,OAAO,EAAAV,GAAKI,mBAAL,oBAA2BC,M,sJCkBrBM,EAxCI,SAAAC,GACjB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,MAAO,CAAEC,UAAW,SAC9C,kBAACJ,EAAA,EAAKK,IAAN,CAAUF,MAAO,CAAEG,aAAc,SAC/B,kBAACN,EAAA,EAAKO,OAAN,CAAaC,OAAQ,GAAIC,OAAQ,GAAIC,SAAU,GAC5CZ,EAAMa,WACL,uBAAGR,MAAO,CAAEG,aAAc,SAAWR,EAAMa,YACzC,KAEJ,kBAACC,EAAA,EAAD,CACEC,GAAG,KACHV,MAAO,CAAEW,SAAU,OAAQV,UAAW,EAAGW,WAAY,SAEpDjB,EAAMkB,eAGRlB,EAAMmB,cAAgBnB,EAAMmB,cAAgB,MAG/C,kBAACjB,EAAA,EAAKO,OAAN,CAAaW,KAAK,mBACfpB,EAAMqB,KACL,kBAAC,IAAD,CACEhB,MAAO,CACLiB,MAAO,MACPhB,UAAW,OACXE,aAAc,OACde,YAAa,OACbC,WAAY,QAEdC,MAAOzB,EAAMqB,OAEb,W,kCC3ChB,wGA4DeK,UArDY,SAAA1B,GAAU,IAC3B2B,EAA0B3B,EAA1B2B,SAAUC,EAAgB5B,EAAhB4B,YACVC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,QACTC,EAAO,+BAAkCD,EACzCX,EACJ,kBAAC,WAAD,KACE,uBAAGd,MAAO,CAAEC,UAAW,SAAvB,8DAC8DwB,EAD9D,MAOEE,EAASH,EAAM,GAAGI,YAAYC,KAAKrC,QAAO,SAAAsC,GAC9C,OAAOA,IAAQL,KACd,GAEH,OACE,kBAAC,IAAD,CACEzC,KAAK,KACL+C,SAAUN,EACVC,QAASA,EACTM,QAASV,EAASW,SAClBX,SAAUA,GAEV,kBAAC,IAAD,CACEd,WAAW,eACXK,cAAc,UACdC,cAAeA,IAGjB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAKV,OAAN,KACE,wBAAIJ,MAAO,CAAEC,UAAW,QAASE,aAAc,SAC5CqB,EAAMU,KAAI,SAACC,EAAMC,GAChB,OACE,wBAAIC,IAAKD,GACP,kBAAC,IAAD,CAAME,GAAE,IAAMX,EAAN,IAAgBQ,EAAKP,YAAYW,MACtCJ,EAAKP,YAAYY,MADpB,OAEG1D,YAAeqD,EAAKP,YAAY7C,KAAM,MAFzC","file":"component---src-templates-single-tags-index-js-f02e3673dfc520577b68.js","sourcesContent":["/**\n * Use this function to format the blog reading time\n * @param {String} minutes\n * @returns {String}\n */\nexport function formatReadingTime(minutes) {\n  const cups = Math.round(minutes / 5);\n\n  if (cups > 5) {\n    return ` / ${new Array(Math.round(cups / Math.E))\n      .fill('🍱')\n      .join('')} ${minutes} min read`;\n  } else {\n    return ` / ${new Array(cups || 1).fill('☕️').join('')} ${minutes} min read`;\n  }\n}\n\n/**\n * Use this function to format the blog post dates. The argument 'lang' is\n * optional and will default to the current user agent locale\n * @param {String} date\n * @param {String} lang\n * @returns {Date}\n */\nexport function formatPostDate(date, lang) {\n  if (typeof Date.prototype.toLocaleDateString !== 'function') {\n    return date;\n  }\n\n  date = new Date(date);\n\n  const args = [lang, { day: 'numeric', month: 'long', year: 'numeric' }].filter(Boolean);\n\n  return date.toLocaleDateString(...args);\n}\n\n/**\n * Use this function to format tags\n * @param {Array} tagsArr\n * @returns {String}\n */\nexport function formatTags(tagsArr) {\n  let tagString = '';\n\n  if (tagsArr.length > 0) {\n    for (let i = 0; i < tagsArr.length; i++) {\n      tagString += tagsArr[i];\n\n      if (i / 2 === 0) {\n        tagString = `${tagString}, `;\n      }\n    }\n\n    return tagString;\n  }\n}\n","import React from 'react';\nimport { Header, Container, Grid } from 'semantic-ui-react';\nimport Img from 'gatsby-image';\n\n/**\n * PageHeader component. The reusable component for headers.\n * props = topSegment, bottomSegment, headerSegment\n * topSegment = string\n * headerSegment = string\n * bottomSegment = DOM\n */\nconst PageHeader = props => {\n  return (\n    <Container>\n      <Grid container columns={2} style={{ marginTop: '3rem' }}>\n        <Grid.Row style={{ marginBottom: '2rem' }}>\n          <Grid.Column mobile={16} tablet={10} computer={8}>\n            {props.topSegment ? (\n              <p style={{ marginBottom: '1rem' }}>{props.topSegment}</p>\n            ) : null}\n\n            <Header\n              as=\"h1\"\n              style={{ fontSize: '4rem', marginTop: 0, lineHeight: '4rem' }}\n            >\n              {props.headerSegment}\n            </Header>\n\n            {props.bottomSegment ? props.bottomSegment : null}\n          </Grid.Column>\n\n          <Grid.Column only=\"computer tablet\">\n            {props.logo ? (\n              <Img\n                style={{\n                  width: '50%',\n                  marginTop: '1rem',\n                  marginBottom: '1rem',\n                  marginRight: 'auto',\n                  marginLeft: 'auto',\n                }}\n                sizes={props.logo}\n              />\n            ) : null}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default PageHeader;\n","import React, { Fragment } from 'react';\nimport { Link } from 'gatsby';\nimport { Container, Grid } from 'semantic-ui-react';\nimport SiteLayout from '../components/SiteLayout';\nimport PageHeader from '../components/PageHeader';\nimport { formatPostDate } from '../utils/helpers';\n\nconst SingleTagsTemplate = props => {\n  const { location, pageContext } = props;\n  const { posts, tagName } = pageContext;\n  const seoDesc = `Posts by DANIELKIM.IO about ${tagName}`;\n  const bottomSegment = (\n    <Fragment>\n      <p style={{ marginTop: '2rem' }}>\n        This page allows you to search for specific posts based on {tagName}.\n      </p>\n    </Fragment>\n  );\n\n  // Gets the subURL => articles\n  const subUrl = posts[0].frontmatter.tags.filter(tag => {\n    return tag !== tagName;\n  })[0];\n\n  return (\n    <SiteLayout\n      lang=\"en\"\n      seoTitle={tagName}\n      seoDesc={seoDesc}\n      seoSlug={location.pathname}\n      location={location}\n    >\n      <PageHeader\n        topSegment=\"It's time to\"\n        headerSegment=\"Search.\"\n        bottomSegment={bottomSegment}\n      />\n\n      <Container>\n        <Grid>\n          <Grid.Column>\n            <ul style={{ marginTop: '-2rem', marginBottom: '5rem' }}>\n              {posts.map((post, index) => {\n                return (\n                  <li key={index}>\n                    <Link to={`/${subUrl}/${post.frontmatter.path}`}>\n                      {post.frontmatter.title} - (\n                      {formatPostDate(post.frontmatter.date, 'en')})\n                    </Link>\n                  </li>\n                );\n              })}\n            </ul>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </SiteLayout>\n  );\n};\n\nexport default SingleTagsTemplate;\n"],"sourceRoot":""}